--------------------------------------------------------------------------------------------------
------------------------------ DECEMBER NOTES DURING AOC2021 -------------------------------------
--------------------------------------------------------------------------------------------------

CACHE AND DESTRUCTURING
@wraps(fn)
def cache(fn):
  _cache = {}
  def cached_fn(*args, **kwargs):
    if (args, kwargs) in _cache:
      return _cache[(args, kwargs)]
    result = fn(*args, **kwargs)
    _cache[(args, kwargs)] = result
    return result

l = [0, 1, 2]
fn(l)  # equivalent to fn([0, 1, 2])
fn(*l)  # equivalent to fn(0, 1, 2)

d = { "a": 0, "b": 1 }
fn(d)  # same as fn({ "a": 0, "b": 1 })
fn(**d)  # same as fn(a=0, b=1)

def fn(a, b, *args, **kwargs):
  print("a:", a, "b:", b, "args:", args, "kwargs:", kwargs)

fn()  # value error
fn(0, 1, 2, 3, 4, 5)  # a: 0 b: 1 args: [2, 3, 4, 5]
fn(0, 1, 2, c=3, d=4, e=5)  # a: 0 b: 1 args: [2] kwargs: {"c":3, "d":4, "e":5}

destructuring is technically:
l = [0, 1]
a, b = l  # this is destructuring
x, y = (12, 35)  # this is destructuring
p, q = a, b  # this is destructuring as righthand is an implicit tuple













Variables
    let foo = 5; // immutable
    let mut bar = 5; // mutable (declare within a statement to show intent on changing the value)
    let complex_var = {
        let mut complex_var = ...
        // A bunch of complex code to initialize the variable
        complex_var // return value from scope
        }   
    shadowing is reassigning the binding from a variable to a new one. 
    original one keeps living in its scope.
        
Data Types 
    Default is 32. but for things like pixels, which are only 3 bits and there are
    billions of them, can use u8 for example. 
    Integers - numbers without fractions
    Floating-Point types - numbers with decimal points. default is f64.
    Numeric Operations - don't need to declare type
    Booleans    
        fn main() {
            let t = true;
            let f: bool = false; // with explicit type annotation
            }
    Characters - four bytes, unicode scalar values, char literals '' string literals double ""
    Compound Types
        Tuples group together a number of values with a variety of types into one compound type. 
            fixed length: once declared, they cannot grow or shrink in size.
            fn main() {
                let tup: (i32, f64, u8) = (500, 6.4, 1);
                let (x, y, z) = tup; (or)
                let six_point_four = x.1;
                println!("The value of y is: {}", y);
        Arrays. All elements same type. BUT fixed length in rust.
        let a: [i32; 5] = [1, 2, 3, 4, 5];
        let a = [3; 5];    same as    let a = [3, 3, 3, 3, 3];
        Vectors can grow or shrink. 

    Functions
        Must declare the type of each parameter.
             fn main() {
                another_function(10, 19);
            }

            fn another_function(x: i32, y: i32) {
                println!("The value of x is: {}", x);
                println!("The value of y is: {}", y);
            }
        Function bodies are made up of a series of statements optionally ending in an expression.
            fn main() {
                let x = 5;

                let y = {
                    let x = 3;
                    x + 1
                };

                println!("The value of y is: {}", y);
            }
        Note the x + 1 line without a semicolon at the end, 
        which is unlike most of the lines you’ve seen so far. 
        Expressions do not include ending semicolons. 
        If you add a semicolon to the end of an expression, 
        you turn it into a statement, which will then not return a value. 
            fn five() -> i32 {
                5
            }
            fn main() {
                let x = five();
                println!("The value of x is: {}", x);
            }


Enumerables - Variants
    Result - Ok, Err
    Ordering - Less, Greater, Equal

for ___ :  ____ 
------ JAVASCRIPT ------
(var) (name) = (argument) =>    /// (var) (attempt) = function(argument) {

Reverse string 
.split() - splits elements of a string into an array
.reverse() - reverses the elements in an array
.join() - joins the elements into a new string

push pop - add remove to end 
unshift shift - add remove to start

for ... of - for loop but maintains indeces
for ... in - for loop without indices

If .repeat(x) isn't working, try Array(x+1).join('string')

------ REGEX ------
https://www.rexegg.com/regex-quickstart.html

------ NIFTY TRICKS ------
_______for loop that starts partway through but loops back around
var myArry = ["cool", "gnarly", "rad", "farout", "awesome"];
var offset = 3;
for( var i=0; i < myArry.length; i++) {
    var pointer = (i + offset) % myArry.length;
    console.log(myArry[pointer]);
}

_______Efficient Prime Check
function isPrime(num) {                         // returns boolean
    if (num <= 1) return false;                 // negatives
    if (num % 2 === 0 && num > 2) return false;  // even numbers
    const s = Math.sqrt(num);                   // store the square to loop faster
    for(let i = 3; i <= s; i += 2) {            // start from 3, stop at the square, increment in twos
        if(num % i === 0) return false;         // modulo shows a divisor was found
    }
    return true;
  } 

_______Factorials
-With recursion
function factorial(num) {
    if (num < 0) return -1
    else if (num == 0) return 1
    else return (num * factorial(num - 1));
}
factorialize(5);
-With while loop
function factorialize(num) {
  var result = num;
  if (num === 0 || num === 1) 
    return 1; 
  while (num > 1) { 
    num--;
    result *= num;
  }
  return result;
}
factorialize(5);

_______Remove spaces from string
.replace(/\s/g, '')

Recursion
factorial(n) = n * factorial(n-1)
Needs a terminating, base point.
And a recursive case. 
Replace loops in non-recursive functions



__________________________________________________________________________________________
------ TERMINAL ------
pwd -P present working directory  -path

ls -(  )    list files/directories
a all files
l  long form
h human readable sizes      (lh is good)
S sort by size
t last modified time
r reverse

ln links
hard links create a copy of the linked file
$ ln a.txt b.txt 
-s for symbolic link (for directories/files, even on other file systems)

cd change directories

mkdir    make directory

cp for copying files    cp -Rv for copying directories
rm delete
mv move

process.exit() for exiting node 




------ HTML/CSS ------
.(text) -> div with class
ul>li*4>input+label 4 items with input and label within a UL.





------ RUST ------
$ rustc (file to open)
$ ./(executable file)

for new projects, in rust directory: 
    $ cargo new _____ --vcs=git (for gitignores when already in a git repository)
    $ cd _____
    ($ cargo build)  -- or just when you run it the first time is ok

for switching projects, in terminal cd ../(program)

To learn about dependencies: cargo doc --open

./target/debug/hello_cargo, cargo run, or check(compile without executable)
when done, cargo build --release

1. Rust style is to indent with four spaces, not a tab.
2. println! calls a Rust macro. If it called a function instead, println (no !)
3. "Hello, world!" string passes as argument to println!, and the string is printed to the screen.
4. Semicolon line enders are common (;).
5. Rust’s naming convention for constants is to use all uppercase with underscores between words, 
and underscores can be inserted in numeric literals to improve readability

use std::io;    io: input output library, from standard lib

.gen_range(1..101);   inclusive on lower, exclusive on upper. alternatively: 1..=100
