https://github.com/erperreault/18xxgamesbot
https://github.com/technomunk/bottica

git clone (url)
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt

pip freeze > requirements.txt

heroku login

git clone

cd

heroku create - Create an app on Heroku, which prepares Heroku to receive your source code:
git push heroku main - The application is now deployed.
heroku ps:scale web=1 - Ensure that at least one instance of the app is running:
heroku open - Now visit the app at the URL generated by its app name, or by this shortcut

heroku logs --tail

heroku ps
heroku ps:scale web=0 - scale dynos (free or paid plans, usage)
heroku ps:scale web=1

pip install -r requirements.txt - installs all requirements as noted in the .txt file
pip list - see what was installed
python manage.py collectstatic - Django uses local assets, so first, you’ll need to run collectstatic:

heroku local - to launch locally
http://localhost:5000 - to view locally

git add .
git commit -m "commit message goes here"
git push heroku main
heroku open - finally check it's all working

heroku addons:create - logging addon
heroku addons - check what's installed
heroku addons:open papertrail - check on the logging info

heroku run python manage.py shell - You can run a command, typically scripts and applications that are part of your app, 
    in a one-off dyno using the heroku run command. It can also be used to launch a REPL process attached to your local 
    terminal for experimenting in your app’s environment. The Python shell is running in the context of your app and all 
    its dependencies. From here you can import some of your application files. i.e.:
            >>> import requests
            >>> print(requests.get('http://httpbin.org/status/418').text)

            -=[ teapot ]=-

                _...._
              .'  _ _ `.
             | ."` ^ `". _,
             \_;`"---"`|//
               |       ;/
               \_     _/
                 `"""`
            >>> exit()
heroku run bash - is ok too ofc


import os - externalise configuration, storing data such as encryption keys or external resource addresses in config vars. i.e.:
        def index(request):
            times = int(os.environ.get('TIMES',3))
            return HttpResponse('Hello! ' * times)
heroku config:set TIMES=2
heroku config

heroku addons - learn more about my addons, databases
heroku config - Listing the config vars will display the URL that your app is using to connect to the database, DATABASE_URL:
heroku pg - more info
    Reach app's database by appending /db to URL
    Accessing it will yield an error though, if no tables have been created yet.
heroku run python manage.py migrate - to create the tables.
    (if... you don't have any superusers defined. Would you like to create one now?”, type no.)
     code to access the database is straightforward, use simple Django model called Greetings in hello/models.py.
