https://leetcode.com/discuss/interview-question/1036815/amazon-sde2-onsite-implement-boggle-game-trie-dfs-scalability-follow-up-question

Trie

https://www.geeksforgeeks.org/boggle-find-possible-words-board-characters/
https://leetcode.com/problems/word-search/
https://leetcode.com/problems/word-search/discuss/27660/Python-dfs-solution-with-comments.


class Solution:
    :type board: List[List[str]]
    :type word: str
    :rtype: bool

    # Keep a set of visited locations, pass it for checking if we find the word at every letter on the board.
    def exist(self, board, word):
        visited = {}

        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.getWords(board, word, i, j, visited):
                    return True
        
        return False

    # To be used iteratively - break if at edge, repeat letter, mismatch, or True if we've gone the length of the word.
    # Mark current as true, check all 4 directions with the same function, mark as untrue for the next iteration of the original loop.
    def getWords(self, board, word, i, j, visited, pos = 0):
        if pos == len(word):
            return True

        if i < 0 or i == len(board) or j < 0 or j == len(board[0]) or visited.get((i, j)) or word[pos] != board[i][j]:
            return False

        visited[(i, j)] = True
        res = self.getWords(board, word, i, j + 1, visited, pos + 1) \
                or self.getWords(board, word, i, j - 1, visited, pos + 1) \
                or self.getWords(board, word, i + 1, j, visited, pos + 1) \
                or self.getWords(board, word, i - 1, j, visited, pos + 1)
        visited[(i, j)] = False

        return res






https://leetcode.com/problems/word-search-ii/
/**
 * @param {character[][]} board
 * @param {string[]} words
 * @return {string[]}
 */
var findWords = function(board, words) {
    const visited = new Map();
    const found = [];
    
    for (let word of words) {
        for (let i = 0; i < board.length; i++) {
            for (let j = 0; j < board[0].length; j++) {
                if (search(board, word, i, j, visited)) {
                    if (found.indexOf(word) === -1) found.push(word);
                }
            }
        }
    }

    return found
};

function search(board, word, i, j, visited, pos=0) {
    
    if (pos === word.length) return true
    
    if (
        (i < 0) || (j < 0) ||
        (i === board.length) || (j === board[0].length) ||
        (visited.has(`${i},${j}`)) ||
        (word[pos] !== board[i][j])
    ) return false
    
    visited.set(`${i},${j}`, true);
    let res = (
        search(board, word, i-1, j, visited, pos+1) ||
        search(board, word, i+1, j, visited, pos+1) ||
        search(board, word, i, j-1, visited, pos+1) ||
        search(board, word, i, j+1, visited, pos+1) 
    )
    visited.delete(`${i},${j}`);
    
    
    return res
}







OR


function findWords(board, words) {
    const dirs = [[-1,0],[1,0],[0,-1],[0,1]];
    let found = [];
    
    function buildTrie() {
        const root = {};
        for (const w of words) {
            let node = root;
            for (const c of w) {
                if (node[c] == null) node[c] = {};
                node = node[c];
            }
            node.word = w;
        }
        return root;
    };
    
    function search(node, x, y) {
        if (node.word != null) {
            found.push(node.word);
            node.word = null;
        }
        
        if (x < 0 || x >= board.length || 
            y < 0 || y >= board[0].length) return;
        
        if (node[board[x][y]] == null) return;
        
        const c = board[x][y];
        board[x][y] = '#';
        for (const [dx, dy] of dirs) {
            const i = x + dx;
            const j = y + dy;
            search(node[c], i, j)
        }
        board[x][y] = c;
    };
    
    const root = buildTrie();
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            search(root, i, j);
        }
    }
    
    return found
}