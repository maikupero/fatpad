https://leetcode.com/discuss/interview-question/1036815/amazon-sde2-onsite-implement-boggle-game-trie-dfs-scalability-follow-up-question

Trie

https://www.geeksforgeeks.org/boggle-find-possible-words-board-characters/
https://leetcode.com/problems/word-search/
https://leetcode.com/problems/word-search/discuss/27660/Python-dfs-solution-with-comments.


class Solution:
    :type board: List[List[str]]
    :type word: str
    :rtype: bool

    # Keep a set of visited locations, pass it for checking if we find the word at every letter on the board.
    def exist(self, board, word):
        visited = {}

        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.getWords(board, word, i, j, visited):
                    return True
        
        return False

    # To be used iteratively - break if at edge, repeat letter, mismatch, or True if we've gone the length of the word.
    # Mark current as true, check all 4 directions with the same function, mark as untrue for the next iteration of the original loop.
    def getWords(self, board, word, i, j, visited, pos = 0):
        if pos == len(word):
            return True

        if i < 0 or i == len(board) or j < 0 or j == len(board[0]) or visited.get((i, j)) or word[pos] != board[i][j]:
            return False

        visited[(i, j)] = True
        res = self.getWords(board, word, i, j + 1, visited, pos + 1) \
                or self.getWords(board, word, i, j - 1, visited, pos + 1) \
                or self.getWords(board, word, i + 1, j, visited, pos + 1) \
                or self.getWords(board, word, i - 1, j, visited, pos + 1)
        visited[(i, j)] = False

        return res