////////////////////////////////////////////////////////////
////////////// BEHAVIORAL INTERVIEW PRACTICE ///////////////
////////////////////////////////////////////////////////////

Practical Examples
• teaching english, curriculum redesign convince kurome, double students, open new kindergarten.
• talking about kal and hiring someone for something i couldnt do, not meeting deadlines, and trying to delegate tasks.
• directing movie in kyoto, made sure they scouted locations and contacted temples for legality and shooting windows.
• translating even the fine print for bilingual website stak.
• Bike tour Japan convince Rob to expand to hiroshima area.
• regarding starting company in japan - finding lodging, legality, taxes, visas, promises from reservations.
• sounds of japan / video yurano / web design with photography.

Coding Examples
• path of studying, algorithm -> cs50 -> build stuff
• discord bot
• vanilla js apps attempt to begin react apps 
• built community of people on discord. i know their toolsets.
• workflow stuff, how i look for efficiencies, new tech, git.
• build site for stak, my experience and what i learned from that.


////////////////////////////////////////////////////////////
//////////////////////// ALGORITHMS ////////////////////////
////////////////////////////////////////////////////////////

SEARCHES
    Binary: left, right, middle, compare, set left or right to mid +- 1.
    Breadth-first: 
    Depth-first: 

SORTS
    Bubble: Inefficient, let each one float to its place.
    Merge: 
    Quick: 

Binary Tree (recursive traversal)

Queue/Stack:
    Brackets problem 

Linked Lists: Efficient memory and storage wise, inefficient with look ups (always at least O(n))

Hash Tables - look through characters that make up the string, do math on them, generate a mostly unique key, store it with that.
balance of processing time hashing vs storing. 

Recursion


////////////////////////////////////////////////////////////
/////////////// DATA STRUCTURES (BACKEND) //////////////////
////////////////////////////////////////////////////////////

Domain
    access points, production for users, but also lower level environments for development. locational use.
Resources
    server stack resources, what does the computer in cloud. 
Params
    like the headers in a get request, what info i want to get. 

API endpoints 
    API Benefit - you don’t have to know the specifics of caching - how your resource is retrieved or where it comes from.
JSON data

HTTP requests
    Get
    Post 

Validation
    talk about validation before user data comes out. 
    does it fit the model? if not we reject request and give error message. 

Fetch

Promises

Async/await

Database
    Foreign key (unique) / primary key
    Composite - for many to many relations, 3rd column that is an index. 
    or composite key is combination of the two. 
    reject duplicates.

REST - Representational State Transfer - stateless, cacheable. efficient, json.
|vs|
SOAP - Simple Object Access Protocol - request is stateful. stored somewhere. inefficient but lots of info, xml. 
if state needs to be maintained from one request to another, then SOAP is good. possible with REST, but its more about convention.
Soap is an envelope, rest is a postcard.




////////////////////////////////////////////////////////////
//////////////// DESIGN AND CS FUNDAMENTALS ////////////////
//////////////////////////////////////////////////////////// 
    Memory (Stack vs Heap)
    (Dynamic Programming)
    Big O Time & Space

Design Patterns:
    Singleton
    Factory Method
    Builder
    Adapter
    State
    Mapper
    SOA vs microservices - integration (enterprisewide) vs application (app scoped).
    SOA - service-oriented architecture, make software components reusable & interoperable via service interfaces. 
    ESB - SOA without ESB is like a bunch of a services. Centralized component to perform integrations between applications.

////////////////////////////////////////////////////////////
///////////// FRAMEWORKS, UI DESIGN (FRONTEND) /////////////
////////////////////////////////////////////////////////////

--- STATE MANAGEMENT ---
Unidirectional Data Flow
Redux
Context

--- CLASS VS FUNCTION COMPONENTS --- 
WHAT    The old vs new in react. 
        Functional accepts props as an argument and returns a React element.
        Class components require you to extend from React.Component and create a render function.
        All about hooks and plugging into lifecycle. 
WHY     In the past, they were used for different purposes, but API changes + hooks led to functions being used for everything. 
USE     So much cleaner and more logical.


--- HOOKS IN REACT, BINDINGS/STORES IN SVELTE ---
WHAT    Let you "hook into" react state and lifecycle features from function components. 
WHY     As above, makes building dynamic websites a breeze - passing props etc unnecessary.
USE     Built in ones like useState, useEffect, useContext, and can also create own.

--- COMPONENT LIFECYCLE ---
Phases of life (the flow of the code -> website).
    | Mounting (component created and placed in DOM) 
    | -> Updating (occurs when state of components or its props change)
    | -> Unmounting (component destroyed and removed from DOM tree)
A series of methods triggered at appropriate phases, like componentDidMount, render.
Methods of each phase of a component's life with use example:
How to use hooks to hook into the right part of the cycle:
Know the differences between old and new API as some have been deprecated.

--- HIGHER ORDER COMPONENTS ---
Pattern emerging from React's compositional nature.
higher order components convert components into another component. 
example is Redux's connect.
* Allows us to define repeating logic in one place and use it in many components.
* Alternative is to create your own hook with reusable logic.

--- VIRTUAL DOM, OPTIMIZE LISTS ---
 > Every person using React in their professional work should know the UI update mechanism implemented in this library.
In-memory representation of a DOM.
Component State change -> React updates VDOM -> 
-> Diffing algorithm compares differences. 
Optimize lists using a 'key' prop. Gives the element a stable identity, detects changes easily.
* Why even use VirtualDOM?

--- ASYNC CODE ---
Callbacks 
    • functions called when the result of async operation is ready.
    • problem is code becomes unreadable with multiple async operations in a row. callback hell.
Promises 
    • dont need a callback, has its own functions that are called upon success/failure.
    • ability to change instead of nesting consecutive callbacks.
Async/Await
    • syntactic sugar on promises, makes async look more sync, more readable.
Example with error catching, how to perform several at same time.