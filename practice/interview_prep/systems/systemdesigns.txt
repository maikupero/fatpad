The system design competency is designed to measure your ability to black box design a software system. 

The goal is for you to deliver a design in production with considerations of deployment, scaling, failures, availability, and performance. 
Be prepared to discuss latency and concurrency. 

Topics to review:
Often times, software systems need software components, something to store data, something to make decisions (such as business logic) and APIs or processes. 
Knowledge of distributed systems, SOA, and n-tiered software architecture is very important in answering systems design questions. 
If you donâ€™t work with these concepts regularly, be sure to review them.
Also, be sure to practice drawing your system design by hand and be prepared to whiteboard.

Ask clarifying questions to scope-down and define requirements.
    Who are you designing the system for and why?
    What expectations do they have in terms of functionality?
    What things would a customer just assume will be in the system but they may not think about in the forefront of their minds? (e.g. it'll be fast and secure)
    What happens if we become hyper-popular with customers? What does 2x growth look like? Or 10x? And how would that influence the design? 

    Understand first what problem your system is supposed to solve. Ask clarifying questions if this is not clear.
    See the interviewer as the customer, requirements might be intentionally vague, and she/he can give you clarifications. 
    Write/raise the requirements or assumptions you are making, and base your design on them. 
    Feel free to create a diagram if that helps you clarifying your thoughts.

Create a design for a system that fulfills captured requirements (e.g., constraints, scalability, maintenance).
    Things that influence the design typically include: non-functional requirements (amount of load, load distribution, security), ways of interacting with the system (user access, scheduled processes, synchronous/asynchronous communication), and data flow.
    Explicitly mention all the assumptions that are being made.
    Spend majority of time on the Critical Requirements identified and on the core functionality.
    Justify the design choices that are made.
    Design the solution for scale, i.e. would more transactions seamlessly work.
    Research and read through best practices in the tech stack or infrastructure you would like to use. It helps to know how code and hardware can be maintained, scaled, and be made available. 

Design for operational performance and plans for failure and can measure the results (e.g., metrics).
    When you have a design that you think solves the customer problem, ensure that it also incorporates operations and think about operations and resilience in your design.
    For example:
    What are the key business and technical metrics for the system? How will someone use that to identify problems?
    What are the potential bottlenecks or pain points?
    What failure points exist?
    What redundancy can we build in to reduce single points of failure?
    How does someone get logs and debug the system?

Identify potential shortcomings and tradeoffs with different designs (e.g., performance, fault, tolerance, dependencies).
    If there are multiple ways to design a system that satisfy the requirements, describe the trade-offs of both approaches, choose one and explain why. Having a conversation with the interviewer and explaining your thought process, might help you to make a choice.
    We are looking for a high level understanding of how to design a system and deep knowledge into at least one area. If the interviewer asks you to dive deep into something you are unfamiliar with, tell them and suggest some other area you are familiar with and dive into that. 